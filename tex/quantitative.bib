@inproceedings{BrunelGMZ14,
  author    = {A. Brunel and
               M. Gaboardi and
               D. Mazza and
               S. Zdancewic},
  title     = {{A Core Quantitative Coeffect Calculus}},
  booktitle = {{ESOP} 2014},
  pages     = {351--370},
  year      = 2014,
  timestamp = {Sun, 23 Mar 2014 10:48:25 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/esop/BrunelGMZ14},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{GhicaS14,
  author    = {Dan R. Ghica and
               Alex I. Smith},
  title     = {Bounded Linear Types in a Resource Semiring},
  booktitle = {{ESOP} 2014},
  pages     = {331--350},
  year      = {2014},
  timestamp = {Sun, 23 Mar 2014 10:48:25 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/esop/GhicaS14},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{POM14,
  author    = {Tomas Petricek and
               Dominic A. Orchard and
               Alan Mycroft},
  title     = {Coeffects: a calculus of context-dependent computation},
  booktitle = {{ICFP} 2014},
  pages     = {123--135},
  year      = {2014},
  timestamp = {Sun, 04 Jun 2017 10:05:10 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/icfp/PetricekOM14},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{girard87linear,
  author = "Jean-Yves Girard",
  title = "Linear Logic",
  journal = "Theor. Comp. Sci.",
  volume = 50,
  pages = "1--101",
  year = 1987
}

@InProceedings{reed10distance,
  author =       {J. Reed and B. C. Pierce},
  title =        {Distance Makes the Types Grow Stronger},
  booktitle = {ICFP 2010},
  year =      2010,
  editor =    {P. Hudak and S. Weirich},
  pages =     {157-168}}

@inproceedings{abadi99core,
  author    = {M. Abadi and
               A. Banerjee and
               N. Heintze and
               J. G. Riecke},
  title     = {{A Core Calculus of Dependency}},
  booktitle = {POPL '99},
  year      = 1999,
  pages     = {147-160},
}

@article{DBLP:journals/toplas/PierceT00,
  author    = {Benjamin C. Pierce and David N. Turner},
  title     = {Local type inference},
  journal   = {{ACM} {TOPLAS}},
  volume    = {22},
  number    = {1},
  pages     = {1--44},
  year      = {2000},
  timestamp = {Wed, 26 Nov 2003 14:26:46 +0100},
  biburl    = {https://dblp.org/rec/bib/journals/toplas/PierceT00},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{Atkey18,
  title = {The Syntax and Semantics of Quantitative Type Theory},
  author = {Robert Atkey},
  year = {2018},
  doi = {10.1145/3209108.3209189},
  booktitle = {LICS '18: 33rd Annual ACM/IEEE Symposium on Logic in Computer Science, July 9--12, 2018, Oxford, United Kingdom}}'}}

@techreport{Barber1996,
  title = {Dual Intuitionistic Linear Logic},
  author = {Andrew Barber},
  year = 1996,
  institution = {University of Edinburgh}
}

@INPROCEEDINGS{judgmental,
  author = {Frank Pfenning and Rowan Davies},
  title = {A Judgmental Reconstruction of Modal Logic},
  booktitle = {Mathematical Structures in Computer Science},
  year = {1999},
  pages = {2001}
}

@InProceedings{context-constrained,
  title = {Context Constrained Computation},
  author = {Robert Atkey and James Wood},
  year = {2018},
  booktitle = {3rd Workshop on Type-Driven Development (TyDe '18), Extended Abstract}
}

@article{Granule18,
          volume = {3},
           month = {June},
           title = {Quantitative program reasoning with graded modal types},
          author = {Dominic A. Orchard and Vilem Liepelt and Harley Eades},
       publisher = {ACM},
            year = {2019},
         journal = {Proceedings of the ACM on Programming Languages},
        keywords = {graded modal types, linear types, coeffects, implementation},
        abstract = {In programming, data is often considered to be infinitely copiable, arbitrarily discardable, and universally unconstrained. However this view is naive: some data encapsulates resources that are subject to protocols (e.g., file and device handles, channels); some data should not be arbitrarily copied or communicated (e.g., private data). Linear types provide a partial remedy by delineating data in two camps: "resources" to be used but never copied or discarded, and unconstrained values. However, this binary distinction is too coarse-grained. Instead, we propose the general notion of graded modal types, which in combination with linear and indexed types, provides an expressive type theory for enforcing fine-grained resource-like properties of data. We present a type system drawing together these aspects (linear, graded, and indexed) embodied in a fully-fledged functional language implementation, called Granule. We detail the type system, including its metatheoretic properties, and explore examples in the concrete language. This work advances the wider goal of expanding the reach of type systems to capture and verify a broader set of program properties.}
}

@MISC{McBride05,
    author = {Conor McBride},
    title = {Type-preserving renaming and substitution},
    year = {2005},
    url = {http://www.strictlypositive.org/ren-sub.pdf}
}

@article{skew,
  doi = {10.1016/j.aim.2012.06.027},
  year = 2012,
  month = {oct},
  publisher = {Elsevier {BV}},
  volume = {231},
  number = {3-4},
  pages = {1694--1730},
  author = {Korn{\'{e}}l Szlach{\'{a}}nyi},
  title = {Skew-monoidal categories and bialgebroids},
  journal = {Advances in Mathematics}
}

@article{BHKM12,
  title = "Strongly typed term representations in Coq",
  keywords = "Coq proof assistant, typed object languages , de Bruijn indices",
  author = "Nick Benton and Chung-Kil Hur and Andrew Kennedy and Conor McBride",
  year = "2012",
  month = "8",
  doi = "10.1007/s10817-011-9219-0",
  language = "English",
  volume = "49",
  journal = "J. of Autom Reasoning",
  issn = "0168-7433",
  number = "2"
}

@phdthesis{petricek-thesis,
  author       = {Petricek, Tomas},
  title        = {Context-aware programming languages},
  school       = {University of Cambridge},
  year         = {2017},
  month        = {3}
}

@inproceedings{LicataSR17,
  author    = {Daniel R. Licata and
               Michael Shulman and
               Mitchell Riley},
  title     = {A Fibrational Framework for Substructural and Modal Logics},
  booktitle = {{FSCD} 2017},
  pages     = {25:1--25:22},
  year      = {2017},
  doi       = {10.4230/LIPIcs.FSCD.2017.25},
  timestamp = {Tue, 11 Feb 2020 15:52:14 +0100},
  biburl    = {https://dblp.org/rec/conf/rta/LicataSR17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{allais17,
  author = {Guillaume Allais},
  title = {{Typing with Leftovers - A mechanization of Intuitionistic Multiplicative-Additive Linear Logic}},
  booktitle = {TYPES 2017},
  pages = {1:1--1:22},
  ISBN = {978-3-95977-071-2},
  ISSN = {1868-8969},
  year = {2018},
  URN = {urn:nbn:de:0030-drops-100490},
  doi = {10.4230/LIPIcs.TYPES.2017.1},
  annote = {Keywords: Type System, Bidirectional, Linear Logic, Agda}
}

@inproceedings{ACMM17,
  author = {Allais, Guillaume and Chapman, James and McBride, Conor and McKinna, James},
  title = {Type-and-Scope Safe Programs and Their Proofs},
  year = {2017},
  isbn = {9781450347051},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3018610.3018613},
  doi = {10.1145/3018610.3018613},
  abstract = {We abstract the common type-and-scope safe structure from computations on λ-terms that deliver, e.g., renaming, substitution, evaluation, CPS-transformation, and printing with a name supply. By exposing this structure, we can prove generic simulation and fusion lemmas relating operations built this way. This work has been fully formalised in Agda.},
  booktitle = {Proceedings of the 6th ACM SIGPLAN Conference on Certified Programs and Proofs},
  pages = {195–207},
  numpages = {13},
  keywords = {Normalisation by Evaluation, Agda, Generic Programming, Mechanized Meta-Theory, Semantics, Lambda-calculus},
  location = {Paris, France},
  series = {CPP 2017}
}

@article{AACMM21,
  author    = {Guillaume Allais and
               Robert Atkey and
               James Chapman and
               Conor McBride and
               James McKinna},
  title     = {A type- and scope-safe universe of syntaxes with binding: their semantics
               and proofs},
  journal   = {{J. Funct. Program.}},
  volume    = {31},
  pages     = {e22},
  year      = {2021},
  url       = {https://doi.org/10.1017/S0956796820000076},
  doi       = {10.1017/S0956796820000076},
  timestamp = {Wed, 12 Jan 2022 09:09:55 +0100},
  biburl    = {https://dblp.org/rec/journals/jfp/AllaisACMM21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{RPKV20,
  author = {Rouvoet, Arjen and Bach Poulsen, Casper and Krebbers, Robbert and Visser, Eelco},
  title = {Intrinsically-Typed Definitional Interpreters for Linear, Session-Typed Languages},
  year = {2020},
  isbn = {9781450370974},
  doi = {10.1145/3372885.3373818},
  pages = {284--298},
  numpages = {15},
  keywords = {type safety, linear types, mechanized semantics, separation logic, Agda, session types, definitional interpreters, dependent types},
  location = {New Orleans, LA, USA},
  booktitle = {CPP 2020}
}

@article{polakow15,
  author = {Polakow, Jeff},
  title = {Embedding a Full Linear Lambda Calculus in Haskell},
  year = {2015},
  issue_date = {January 2016},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {50},
  number = {12},
  issn = {0362-1340},
  doi = {10.1145/2887747.2804309},
  journal = {SIGPLAN Not.},
  month = aug,
  pages = {177–188},
  numpages = {12},
  keywords = {linear lambda calculus, higher-order abstract syntax, domain specific language}
}

@article{crary10,
  author = {Crary, Karl},
  title = {Higher-Order Representation of Substructural Logics},
  year = {2010},
  issue_date = {September 2010},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {45},
  number = {9},
  issn = {0362-1340},
  doi = {10.1145/1932681.1863565},
  journal = {SIGPLAN Not.},
  month = sep,
  pages = {131–142},
  numpages = {12},
  keywords = {linear logic, logical frameworks, modal logic, mechanized metatheory}
}

@inproceedings{wadler91use,
  title={There's no substitute for linear logic},
  author={Wadler, Philip},
  booktitle={8th International Workshop on the Mathematical Foundations of Programming Semantics},
  year=1992}

@unpublished{power99,
  author={James Power and Caroline Webster},
  title={Working with Linear Logic in Coq},
  year = {1999},
  note = {12th International Conference on Theorem Proving in Higher Order Logics (Work-in-progress paper)}
}

@unpublished{laurent18,
  author={Olivier Laurent},
  title={Preliminary Report on the Yalla Library},
  year = {2018},
  note = {Coq Workshop},
  url = {https://perso.ens-lyon.fr/olivier.laurent/yalla/}
}

@article{ChaudhuriLR19,
  author    = {Kaustuv Chaudhuri and
               Leonardo Lima and
               Giselle Reis},
  title     = {Formalized meta-theory of sequent calculi for linear logics},
  journal   = {Theor. Comput. Sci.},
  volume    = 781,
  pages     = {24--38},
  year      = 2019,
  doi       = {10.1016/j.tcs.2019.02.023},
  timestamp = {Fri, 05 Jul 2019 09:39:48 +0200},
  biburl    = {https://dblp.org/rec/journals/tcs/ChaudhuriLR19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{XavierORN18,
  author    = {Bruno Xavier and
               Carlos Olarte and
               Giselle Reis and
               Vivek Nigam},
  title     = {Mechanizing Focused Linear Logic in Coq},
  booktitle = {12th Workshop on Logical and Semantic Frameworks, with Applications},
  series    = {ENTCS},
  volume    = {338},
  pages     = {219--236},
  publisher = {Elsevier},
  year      = {2017},
  doi       = {10.1016/j.entcs.2018.10.014},
  timestamp = {Wed, 05 Feb 2020 13:49:05 +0100},
  biburl    = {https://dblp.org/rec/journals/entcs/XavierORN18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}



@inproceedings{BBdePH93,
  author    = {P. N. Benton and
               Gavin M. Bierman and
               Valeria de Paiva and
               Martin Hyland},
  title     = {A Term Calculus for Intuitionistic Linear Logic},
  booktitle = {Typed Lambda Calculi and Applications},
  series    = {LNCS},
  volume    = {664},
  pages     = {75--90},
  publisher = {Springer},
  year      = {1993},
  doi       = {10.1007/BFb0037099},
  timestamp = {Tue, 14 May 2019 10:00:41 +0200},
  biburl    = {https://dblp.org/rec/conf/tlca/BentonBPH93.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{AbelBernardy2020,
  author = {Abel, Andreas and Bernardy, Jean-Philippe},
  title = {A Unified View of Modalities in Type Systems},
  year = {2020},
  issue_date = {August 2020},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {4},
  number = {ICFP},
  url = {https://doi.org/10.1145/3408972},
  doi = {10.1145/3408972},
  abstract = {We propose to unify the treatment of a broad range of modalities in typed lambda calculi. We do so by defining a generic structure of modalities, and show that this structure arises naturally from the structure of intuitionistic logic, and as such finds instances in a wide range of type systems previously described in literature. Despite this generality, this structure has a rich metatheory, which we expose.},
  journal = {Proc. ACM Program. Lang.},
  month = aug,
  articleno = {90},
  numpages = {28},
  keywords = {subtyping, modal logic, linear types}
}

@INPROCEEDINGS{Benton94,
    author = {P.N. Benton},
    title = {A Mixed Linear and Non-Linear Logic: Proofs, Terms and Models},
    booktitle = {},
    year = {1994},
    pages = {121--135},
    publisher = {Springer-Verlag}
}

@article{Gentzen64,
  pages = {288--306},
  author = {Gerhard Gentzen},
  title = {Investigations Into Logical Deduction},
  number = {4},
  year = {1964},
  volume = {1},
  publisher = {Association for Symbolic Logic},
  journal = {American Philosophical Quarterly}
}

@article{CH00,
  author = {Curien, Pierre-Louis and Herbelin, Hugo},
  title = {The Duality of Computation},
  year = {2000},
  issue_date = {Sept. 2000},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {35},
  number = {9},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/357766.351262},
  doi = {10.1145/357766.351262},
  abstract = {We present the μ -calculus, a syntax for λ-calculus + control operators exhibiting symmetries such as program/context and call-by-name/call-by-value. This calculus is derived from implicational Gentzen's sequent calculus LK, a key classical logical system in proof theory. Under the Curry-Howard correspondence between proofs and programs, we can see LK, or more precisely a formulation called LKμ , as a syntax-directed system of simple types for μ -calculus. For μ -calculus, choosing a call-by-name or call-by-value discipline for reduction amounts to choosing one of the two possible symmetric orientations of a critical pair. Our analysis leads us to revisit the question of what is a natural syntax for call-by-value functional computation. We define a translation of λμ-calculus into μ -calculus and two dual translations back to λ-calculus, and we recover known CPS translations by composing these translations.},
  journal = {SIGPLAN Not.},
  month = sep,
  pages = {233–243},
  numpages = {11}
}

@article{Wadler03,
  author = {Wadler, Philip},
  title = {Call-by-Value is Dual to Call-by-Name},
  year = {2003},
  issue_date = {September 2003},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {38},
  number = {9},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/944746.944723},
  doi = {10.1145/944746.944723},
  abstract = {The rules of classical logic may be formulated in pairs corresponding to De Morgan duals: rules about &amp; are dual to rules about V. A line of work, including that of Filinski (1989), Griffin (1990), Parigot (1992), Danos, Joinet, and Schellinx (1995), Selinger (1998,2001), and Curien and Herbelin (2000), has led to the startling conclusion that call-by-value is the de Morgan dual of call-by-name.This paper presents a dual calculus that corresponds to the classical sequent calculus of Gentzen (1935) in the same way that the lambda calculus of Church (1932,1940) corresponds to the intuitionistic natural deduction of Gentzen (1935). The paper includes crisp formulations of call-by-value and call-by-name that are obviously dual; no similar formulations appear in the literature. The paper gives a CPS translation and its inverse, and shows that the translation is both sound and complete, strengthening a result in Curien and Herbelin (2000).},
  journal = {SIGPLAN Not.},
  month = aug,
  pages = {189–201},
  numpages = {13},
  keywords = {logic, lambda calculus, De Morgan dual, sequent calculus, lambda mu calculus, Curry-Howard correspondence, natural deduction}
}

@misc{herbelin-hab,
  title = {C'est maintenant qu'on calcule, au c{\oe}ur de la dualit{\'e}},
  author = {Hugo Herbelin},
  year = {2005},
  howpublished = {Habilitation},
  institution = {Universit{\'e} Paris}
}

@book{Prawitz65,
  title={Natural Deduction: A Proof-Theoretical Study},
  author={Prawitz, D.},
  isbn={9780486446554},
  lccn={2005051968},
  series={Dover Books on Mathematics},
  url={https://books.google.co.uk/books?id=sJj3DQAAQBAJ},
  year={1965},
  publisher={Dover Publications}
}

@ARTICLE{oHP99,
  author = {Peter W. O'Hearn and David J. Pym},
  title = {The Logic of Bunched Implications},
  journal = {BULLETIN OF SYMBOLIC LOGIC},
  year = {1999},
  volume = {5},
  number = {2},
  pages = {215--244}
}

@ARTICLE{GP02,
  author = {Murdoch J. Gabbay and Andrew M. Pitts},
  title = {A new approach to abstract syntax with variable binding},
  journal = {Formal Aspects of Computing},
  year = {2002},
  volume = {13},
  pages = {341--363}
}

@phdthesis{Gabbay-thesis,
  author = {Gabbay, Murdoch J.},
  institution = {University of Cambridge, UK},
  url = {http://www.gabbay.org.uk/papers.html\#thesis},
  year = {2001},
  date = {2001-03},
  file = {http://www.gabbay.org.uk/papers/thesis.pdf},
  title = {\href{http://www.gabbay.org.uk/papers.html\#thesis}{A Theory of Inductive Definitions with alpha-Equivalence}},
  type = {phdthesis}
}

@InProceedings{WA21,
  title = {A Linear Algebra Approach to Linear Metatheory},
  author = {James Wood and Robert Atkey},
  year = {2021},
  doi = {10.4204/EPTCS.353.10},
  booktitle = {Proceedings Second Joint International Workshop on Linearity \& Trends in Linear Logic and Applications, Online, 29-30 June 2020},
  editor = {Dal Lago, Ugo and de Paiva, Valeria}}

@inproceedings{WA22,
  author       = {James Wood and
                  Robert Atkey},
  editor       = {Ilya Sergey},
  title        = {A Framework for Substructural Type Systems},
  booktitle    = {Programming Languages and Systems - 31st European Symposium on Programming,
                  {ESOP} 2022, Held as Part of the European Joint Conferences on Theory
                  and Practice of Software, {ETAPS} 2022, Munich, Germany, April 2-7,
                  2022, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {13240},
  pages        = {376--402},
  publisher    = {Springer},
  year         = {2022},
  url          = {https://doi.org/10.1007/978-3-030-99336-8\_14},
  doi          = {10.1007/978-3-030-99336-8\_14},
  timestamp    = {Fri, 29 Apr 2022 14:50:41 +0200},
  biburl       = {https://dblp.org/rec/conf/esop/WoodA22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@incollection{McBride16,
  title={I got plenty o’ nuttin’},
  author={McBride, Conor},
  booktitle={A List of Successes That Can Change the World},
  pages={207--233},
  year={2016},
  publisher={Springer}
}

@MISC{LC06,
    author = {William Lovas and Karl Crary},
    title = {Structural Normalization for Classical Natural Deduction},
    year = {2006}
}

@INPROCEEDINGS{FPT99,
  author={Fiore, M. and Plotkin, G. and Turi, D.},
  booktitle={Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158)},
  title={Abstract syntax and variable binding},
  year={1999},
  volume={},
  number={},
  pages={193-202},
  doi={10.1109/LICS.1999.782615}
}

@software{generic-lr,
  author       = {James Wood and Robert Atkey},
  title        = {laMudri/generic-lr},
  month        = jan,
  year         = 2022,
  publisher    = {Zenodo},
  doi          = {10.5281/zenodo.5920051},
  url          = {https://doi.org/10.5281/zenodo.5920051}
}

@INPROCEEDINGS{AR99,
    author = {Thorsten Altenkirch and Bernhard Reus},
    title = {Monadic Presentations of Lambda Terms Using Generalized Inductive Types},
    booktitle = {In Computer Science Logic},
    year = {1999},
    pages = {453--468},
    publisher = {Springer-Verlag}
}

@article{Wadler12,
  title={Propositions as sessions},
  author={Wadler, Philip},
  journal={ACM SIGPLAN Notices},
  volume={47},
  number={9},
  pages={273--286},
  year={2012},
  publisher={ACM New York, NY, USA}
}

@inproceedings{HMWO21,
  TITLE = {{Linear Exponentials as Graded Modal Types}},
  AUTHOR = {Hughes, Jack and Marshall, Daniel and Wood, James and Orchard, Dominic},
  URL = {https://hal-lirmm.ccsd.cnrs.fr/lirmm-03271465},
  BOOKTITLE = {{5th International Workshop on Trends in Linear Logic and Applications (TLLA 2021)}},
  ADDRESS = {Rome (virtual), Italy},
  YEAR = {2021},
  MONTH = Jun,
  PDF = {https://hal-lirmm.ccsd.cnrs.fr/lirmm-03271465/file/TLLA_2021_paper_11.pdf},
  HAL_ID = {lirmm-03271465},
  HAL_VERSION = {v1},
}

@article{BDJ03,
  author = {Benke, Marcin and Dybjer, Peter and Jansson, Patrik},
  title = {Universes for Generic Programs and Proofs in Dependent Type Theory},
  year = {2003},
  issue_date = {December 2003},
  publisher = {Publishing Association Nordic Journal of Computing},
  address = {FIN},
  volume = {10},
  number = {4},
  issn = {1236-6064},
  abstract = {We show how to write generic programs and proofs in Martin-L\"{o}f type theory. To this end we consider several extensions of Martin-L\"{o}f's logical framework for dependent types. Each extension has a universe of codes (signatures) for inductively defined sets with generic formation, introduction, elimination, and equality rules. These extensions are modeled on Dybjer and Setzer's finitely axiomatized theories of inductive-recursive definitions, which also have universes of codes for sets, and generic formation, introduction, elimination, and equality rules. Here we consider several smaller universes of interest for generic programming and universal algebra. We formalize one-sorted and many-sorted term algebras, as well as iterated, generalized, parameterized, and indexed inductive definitions. We also show how to extend the techniques of generic programming to these universes. Furthermore, we give generic proofs of reflexivity and substitutivity of a generic equality test: Most of the definitions in the paper have been implemented using the proof assistant Alfa for dependent type theory.},
  journal = {Nordic J. of Computing},
  month = {dec},
  pages = {265–289},
  numpages = {25},
  keywords = {generic programming, algebraic specifications, polytypic programming, inductive definitions, martin-L\"{o}f type theory, dependent types}
}

@incollection{Day70,
  author = {Day, Brian},
  title = {On closed categories of functors},
  year = {1970},
  booktitle = {Reports of the Midwest Category Seminar IV},
  series = {Lecture Notes in Mathematics},
  volume = {137},
  publisher = {Springer-Verlag},
  pages = {1--38}
}

@INPROCEEDINGS{Wadler89,
    author = {Philip Wadler},
    title = {Theorems for free!},
    booktitle = {FUNCTIONAL PROGRAMMING LANGUAGES AND COMPUTER ARCHITECTURE},
    year = {1989},
    pages = {347--359},
    publisher = {ACM Press}
}

@inproceedings{Reynolds83,
  author    = {John C. Reynolds},
  editor    = {R. E. A. Mason},
  title     = {Types, Abstraction and Parametric Polymorphism},
  booktitle = {Information Processing 83, Proceedings of the {IFIP} 9th World Computer
               Congress, Paris, France, September 19-23, 1983},
  pages     = {513--523},
  publisher = {North-Holland/IFIP},
  year      = {1983},
  timestamp = {Sun, 28 Jul 2019 17:03:41 +0200},
  biburl    = {https://dblp.org/rec/conf/ifip/Reynolds83.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Autosubst15,
  author    = {Steven Sch{\"{a}}fer and
               Tobias Tebbi and
               Gert Smolka},
  editor    = {Christian Urban and
               Xingyuan Zhang},
  title     = {Autosubst: Reasoning with de Bruijn Terms and Parallel Substitutions},
  booktitle = {Interactive Theorem Proving - 6th International Conference, {ITP}
               2015, Nanjing, China, August 24-27, 2015, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {9236},
  pages     = {359--374},
  publisher = {Springer},
  year      = {2015},
  url       = {https://doi.org/10.1007/978-3-319-22102-1\_24},
  doi       = {10.1007/978-3-319-22102-1\_24},
  timestamp = {Tue, 14 May 2019 10:00:37 +0200},
  biburl    = {https://dblp.org/rec/conf/itp/SchaferTS15.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Autosubst18,
  author = {Kaiser, Jonas and Sch\"{a}fer, Steven and Stark, Kathrin},
  title = {Binder Aware Recursion over Well-Scoped de Bruijn Syntax},
  year = {2018},
  isbn = {9781450355865},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3167098},
  doi = {10.1145/3167098},
  abstract = {The de Bruijn representation of syntax with binding is commonly used, but flawed when it comes to recursion. As the structural recursion principle associated to an inductive type of expressions is unaware of the binding discipline, each recursive definition requires a separate proof of compatibility with variable instantiation. We solve this problem by extending Allais' notion of syntax traversals to obtain a framework for instantiation-compatible recursion. The framework is general enough to handle multivariate, potentially mutually recursive syntactic systems. With our framework we define variable renaming and instantiation, syntax directed typing and certain unary logical relations for System F. These definitons lead to concise proofs of type preservation, as well as weak and strong normalisation. Our framework is designed to serve as the theoretical foundation of future versions of the Autosubst Coq library. All developments and case studies are formalised in the Coq proof assistant.},
  booktitle = {Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs},
  pages = {293–306},
  numpages = {14},
  keywords = {parallel substitutions, well-scoped de Bruijn representation, recursion principle, System F},
  location = {Los Angeles, CA, USA},
  series = {CPP 2018}
}

@inproceedings{Autosubst19,
  author = {Stark, Kathrin and Sch\"{a}fer, Steven and Kaiser, Jonas},
  title = {Autosubst 2: reasoning with multi-sorted de Bruijn terms and vector substitutions},
  year = {2019},
  isbn = {9781450362221},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3293880.3294101},
  doi = {10.1145/3293880.3294101},
  abstract = {Formalising metatheory in the Coq proof assistant is tedious as reasoning with binders without native support requires a lot of uninteresting technicalities. To relieve users from so-produced boilerplate, the Autosubst framework automates working with de Bruijn terms: For each annotated inductive type, Autosubst generates a corresponding instantiation operation for parallel substitutions and a decision procedure for assumption-free substitution lemmas. However, Autosubst is implemented in Ltac, Coq's tactic language, and thus suffers from Ltac's limitations. In particular, Autosubst is restricted to Coq and unscoped, non-mutual inductive types with a single sort of variables. In this paper, we present a new version of Autosubst that overcomes these restrictions. Autosubst 2 is an external code generator, which translates second-order HOAS specifications into potentially mutual inductive term sorts. We extend the equational theory of Autosubst to the case of mutual inductive sorts by combining the application of multiple parallel substitutions into exactly one instantiation operation for each sort, i.e. we parallelise substitutions to vector substitutions. The resulting equational theory is both simpler and more expressive than that of the original Autosubst framework and allows us to present an even more elegant proof of part A of the POPLMark challenge.},
  booktitle = {Proceedings of the 8th ACM SIGPLAN International Conference on Certified Programs and Proofs},
  pages = {166–180},
  numpages = {15},
  keywords = {sigma-calculus, parallel substiutions, multi-sorted terms, de Bruijn repersentation},
  location = {Cascais, Portugal},
  series = {CPP 2019}
}

@article{ACCL91,
  title={Explicit substitutions},
  volume={1},
  DOI={10.1017/S0956796800000186},
  number={4},
  journal={Journal of Functional Programming},
  publisher={Cambridge University Press},
  author={Abadi, M. and Cardelli, L. and Curien, P.-L. and Lévy, J.-J.},
  year={1991},
  pages={375–416}
}


@article{FS22,
  author = {Fiore, Marcelo and Szamozvancev, Dmitrij},
  title = {Formal Metatheory of Second-Order Abstract Syntax},
  year = {2022},
  issue_date = {January 2022},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {6},
  number = {POPL},
  url = {https://doi.org/10.1145/3498715},
  doi = {10.1145/3498715},
  abstract = {Despite extensive research both on the theoretical and practical fronts, formalising, reasoning about, and implementing languages with variable binding is still a daunting endeavour – repetitive boilerplate and the overly complicated metatheory of capture-avoiding substitution often get in the way of progressing on to the actually interesting properties of a language. Existing developments offer some relief, however at the expense of inconvenient and error-prone term encodings and lack of formal foundations. We present a mathematically-inspired language-formalisation framework implemented in Agda. The system translates the description of a syntax signature with variable-binding operators into an intrinsically-encoded, inductive data type equipped with syntactic operations such as weakening and substitution, along with their correctness properties. The generated metatheory further incorporates metavariables and their associated operation of metasubstitution, which enables second-order equational/rewriting reasoning. The underlying mathematical foundation of the framework – initial algebra semantics – derives compositional interpretations of languages into their models satisfying the semantic substitution lemma by construction.},
  journal = {Proc. ACM Program. Lang.},
  month = {jan},
  articleno = {53},
  numpages = {29},
  keywords = {abstract syntax, Agda, category theory, language formalisation}
}

@article{ACU15,
  author    = {Thorsten Altenkirch and
               James Chapman and
               Tarmo Uustalu},
  title     = {Monads need not be endofunctors},
  journal   = {Log. Methods Comput. Sci.},
  volume    = {11},
  number    = {1},
  year      = {2015},
  url       = {https://doi.org/10.2168/LMCS-11(1:3)2015},
  doi       = {10.2168/LMCS-11(1:3)2015},
  timestamp = {Thu, 25 Jun 2020 21:29:11 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/AltenkirchCU14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{McBride12,
  title={A polynomial testing principle},
  author={McBride, Conor},
  journal={URL:https://personal.cis.strath.ac.uk/conor.mcbride/PolyTest.pdf},
  pages={37},
  year={2012}
}

@article{Arntzenius19,
  title={Tones and Types},
  author={Arntzenius, Michael},
  journal={URL:http://www.rntz.net/files/tones.pdf},
  pages={14},
  year={2019}
}

@article{BB18,
  title = {On Models of Higher-Order Separation Logic},
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {336},
  pages = {57-78},
  year = {2018},
  note = {The Thirty-third Conference on the Mathematical Foundations of Programming Semantics (MFPS XXXIII)},
  issn = {1571-0661},
  doi = {https://doi.org/10.1016/j.entcs.2018.03.016},
  url = {https://www.sciencedirect.com/science/article/pii/S1571066118300197},
  author = {Aleš Bizjak and Lars Birkedal},
  keywords = {separation logic, model, modalities}
}

@article{CK20,
  author = {Choudhury, Vikraman and Krishnaswami, Neel},
  title = {Recovering Purity with Comonads and Capabilities},
  year = {2020},
  issue_date = {August 2020},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {4},
  number = {ICFP},
  url = {https://doi.org/10.1145/3408993},
  doi = {10.1145/3408993},
  abstract = {In this paper, we take a pervasively effectful (in the style of ML) typed lambda calculus, and show how to extend it to permit capturing pure expressions with types. Our key observation is that, just as the pure simply-typed lambda calculus can be extended to support effects with a monadic type discipline, an impure typed lambda calculus can be extended to support purity with a comonadic type discipline. We establish the correctness of our type system via a simple denotational model, which we call the capability space model. Our model formalises the intuition common to systems programmers that the ability to perform effects should be controlled via access to a permission or capability, and that a program is capability-safe if it performs no effects that it does not have a runtime capability for. We then identify the axiomatic categorical structure that the capability space model validates, and use these axioms to give a categorical semantics for our comonadic type system. We then give an equational theory (substitution and the call-by-value β and η laws) for the imperative lambda calculus, and show its soundness relative to this semantics. Finally, we give a translation of the pure simply-typed lambda calculus into our comonadic imperative calculus, and show that any two terms which are βη-equal in the STLC are equal in the equational theory of the comonadic calculus, establishing that pure programs can be mapped in an equation-preserving way into our imperative calculus.},
  journal = {Proc. ACM Program. Lang.},
  month = {aug},
  articleno = {111},
  numpages = {28},
  keywords = {comonads, effects, modal type theory, capabilities, categorical semantics}
}

@article{Lambek58,
  author = {Joachim Lambek},
  title = {The Mathematics of Sentence Structure},
  journal = {The American Mathematical Monthly},
  volume = {65},
  number = {3},
  pages = {154-170},
  year  = {1958},
  publisher = {Taylor & Francis},
  doi = {10.1080/00029890.1958.11989160},
  URL = {https://doi.org/10.1080/00029890.1958.11989160},
  eprint = {https://doi.org/10.1080/00029890.1958.11989160}
}

@misc{AgdaIssue1201,
  author = {Andreas Abel},
  title = {{Check needed when ∞ < ∞ is ok for sizes}},
  year = {2015},
  URL = {https://github.com/agda/agda/issues/1201}
}

@INPROCEEDINGS{Fiore08,
  author={Fiore, Marcelo},
  booktitle={2008 23rd Annual IEEE Symposium on Logic in Computer Science},
  title={Second-Order and Dependently-Sorted Abstract Syntax},
  year={2008},
  volume={},
  number={},
  pages={57-68},
  doi={10.1109/LICS.2008.38}
}

@INPROCEEDINGS{FH13,
  author={Fiore, Marcelo and Hamana, Makoto},
  booktitle={2013 28th Annual ACM/IEEE Symposium on Logic in Computer Science},
  title={Multiversal Polymorphic Algebraic Theories: Syntax, Semantics, Translations, and Equational Logic},
  year={2013},
  volume={},
  number={},
  pages={520-529},
  doi={10.1109/LICS.2013.59}
}

@InProceedings{FH10,
  author="Fiore, Marcelo and Hur, Chung-Kil",
  editor="Dawar, Anuj and Veith, Helmut",
  title="Second-Order Equational Logic (Extended Abstract)",
  booktitle="Computer Science Logic",
  year="2010",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="320--335",
  abstract="We extend universal algebra and its equational logic from first to second order as follows.",
  isbn="978-3-642-15205-4"
}

@InProceedings{FM10,
  author="Fiore, Marcelo and Mahmoud, Ola",
  editor="Hlin{\v{e}}n{\'y}, Petr and Ku{\v{c}}era, Anton{\'i}n",
  title="Second-Order Algebraic Theories",
  booktitle="Mathematical Foundations of Computer Science 2010",
  year="2010",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="368--380",
  abstract="Fiore and Hur [10] recently introduced a conservative extension of universal algebra and equational logic from first to second order. Second-order universal algebra and second-order equational logic respectively provide a model theory and a formal deductive system for languages with variable binding and parameterised metavariables. This work completes the foundations of the subject from the viewpoint of categorical algebra. Specifically, the paper introduces the notion of second-order algebraic theory and develops its basic theory. Two categorical equivalences are established: at the syntactic level, that of second-order equational presentations and second-order algebraic theories; at the semantic level, that of second-order algebras and second-order functorial models. Our development includes a mathematical definition of syntactic translation between second-order equational presentations. This gives the first formalisation of notions such as encodings and transforms in the context of languages with variable binding.",
  isbn="978-3-642-15155-2"
}

@article{Pitts23,
  author    = {Andrew M. Pitts},
  title     = {Locally Nameless Sets},
  journal   = {Proc. {ACM} Program. Lang.},
  volume    = {7},
  number    = {{POPL}},
  pages     = {488--514},
  year      = {2023},
  url       = {https://doi.org/10.1145/3571210},
  doi       = {10.1145/3571210},
  timestamp = {Fri, 10 Feb 2023 23:34:54 +0100},
  biburl    = {https://dblp.org/rec/journals/pacmpl/Pitts23.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{HHLM22,
  author    = {Andr{\'{e}} Hirschowitz and
               Tom Hirschowitz and
               Ambroise Lafont and
               Marco Maggesi},
  title     = {Variable binding and substitution for (nameless) dummies},
  journal   = {CoRR},
  volume    = {abs/2209.02614},
  year      = {2022},
  url       = {https://doi.org/10.48550/arXiv.2209.02614},
  doi       = {10.48550/arXiv.2209.02614},
  eprinttype = {arXiv},
  eprint    = {2209.02614},
  timestamp = {Mon, 26 Sep 2022 18:12:06 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2209-02614.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{ABW06,
  author =      {Brian Aydemir and Aaron Bohannon and Stephanie Weirich},
  title =       {Nominal Reasoning Techniques in {Coq}},
  booktitle =   {International Workshop on Logical Frameworks and
                  Meta-Languages:Theory and Practice (LFMTP) },
  year =        2006,
  address =     {Seattle, WA, USA},
  month =       aug
}

@article{Urban08,
  author    = {Christian Urban},
  title     = {Nominal Techniques in {Isabelle/HOL}},
  journal   = {J. Autom. Reason.},
  volume    = {40},
  number    = {4},
  pages     = {327--356},
  year      = {2008},
  url       = {https://doi.org/10.1007/s10817-008-9097-2},
  doi       = {10.1007/s10817-008-9097-2},
  timestamp = {Wed, 02 Sep 2020 13:30:06 +0200},
  biburl    = {https://dblp.org/rec/journals/jar/Urban08.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{Gabbay20,
  author = {Murdoch J. Gabbay},
  title = {The {nom} package},
  year = {2020},
  url = {https://hackage.haskell.org/package/nom-0.1.0.2/docs/Language-Nominal.html}
}

@article{TP06,
    author = {Tanaka, Miki and Power, John},
    title = "{A Unified Category-theoretic Semantics for Binding Signatures in Substructural Logics}",
    journal = {Journal of Logic and Computation},
    volume = {16},
    number = {1},
    pages = {5-25},
    year = {2006},
    month = {02},
    abstract = "{Generalizing Fiore et al.'s use of the category 𝔽 of finite sets to model untyped Cartesian contexts and Tanaka's use of the category ℙ of permutations to model untyped linear contexts, we let S be an arbitrary pseudo-monad on Cat and let S1 model untyped contexts in general: this generality includes contexts for sub-structural logics such as the Logic of Bunched Implications and variants. Given a pseudo-distributive law of S over the (partial) pseudo-monad for free cocompletions, we define a canonical substitution monoidal structure on the category [(S1)op, Set], generalizing substitution monoidal structures for Cartesian and linear contexts and providing a natural substitution structure for Bunched Implications and its variants. We give a concrete description of the substitution monoidal structure. We then give an axiomatic definition of a binding signature, again extending the definitions for Cartesian and linear contexts. We investigate examples in detail, then prove the central result of the paper, yielding initial algebra semantics for binding signatures at the level of generality we propose.}",
    issn = {0955-792X},
    doi = {10.1093/logcom/exi070},
    url = {https://doi.org/10.1093/logcom/exi070},
    eprint = {https://academic.oup.com/logcom/article-pdf/16/1/5/3707748/exi070.pdf},
}

@inproceedings{MMS18,
  author = {McLaughlin, Craig and McKinna, James and Stark, Ian},
  title = {Triangulating Context Lemmas},
  year = {2018},
  isbn = {9781450355865},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3167081},
  doi = {10.1145/3167081},
  abstract = {The idea of a context lemma spans a range of programming-language models: from Milner’s original through the CIU theorem to ‘CIU-like’ results for multiple language features. Each shows that to prove observational equivalence between program terms it is enough to test only some restricted class of contexts: applicative, evaluation, reduction, etc. We formally reconstruct a distinctive proof method for context lemmas based on cyclic inclusion of three program approximations: by triangulating between ‘applicative’ and ‘logical’ relations we prove that both match the observational notion, while being simpler to compute. Moreover, the observational component of the triangle condenses a series of approximations covering variation in the literature around what variable-capturing structure qualifies as a ‘context’. Although entirely concrete, our approach involves no term dissection or inspection of reduction sequences; instead we draw on previous context lemmas using operational logical relations and biorthogonality. We demonstrate the method for a fine-grained call-by-value presentation of the simply-typed lambda-calculus, and extend to a CIU result formulated with frame stacks. All this is formalised and proved in Agda: building on work of Allais et al., we exploit dependent types to specify lambda-calculus terms as well-typed and well-scoped by construction. By doing so, we seek to dispel any lingering anxieties about the manipulation of concrete contexts when reasoning about bound variables, capturing substitution, and observational equivalences.},
  booktitle = {Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs},
  pages = {102–114},
  numpages = {13},
  keywords = {Dependent types, Context lemma, CIU theorem, Observational equivalence, Agda, Logical relations},
  location = {Los Angeles, CA, USA},
  series = {CPP 2018}
}

@article{Hofmann03,
  author       = {Martin Hofmann},
  title        = {Linear types and non-size-increasing polynomial time computation},
  journal      = {Inf. Comput.},
  volume       = {183},
  number       = {1},
  pages        = {57--85},
  year         = {2003},
  url          = {https://doi.org/10.1016/S0890-5401(03)00009-9},
  doi          = {10.1016/S0890-5401(03)00009-9},
  timestamp    = {Fri, 12 Feb 2021 22:15:51 +0100},
  biburl       = {https://dblp.org/rec/journals/iandc/Hofmann03.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{MK14,
  author = {Matsakis, Nicholas D. and Klock, Felix S.},
  title = {The Rust Language},
  year = {2014},
  issue_date = {December 2014},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {34},
  number = {3},
  issn = {1094-3641},
  url = {https://doi.org/10.1145/2692956.2663188},
  doi = {10.1145/2692956.2663188},
  abstract = {Rust is a new programming language for developing reliable and efficient systems. It is designed to support concurrency and parallelism in building applications and libraries that take full advantage of modern hardware. Rust's static type system is safe1 and expressive and provides strong guarantees about isolation, concurrency, and memory safety.Rust also offers a clear performance model, making it easier to predict and reason about program efficiency. One important way it accomplishes this is by allowing fine-grained control over memory representations, with direct support for stack allocation and contiguous record storage. The language balances such controls with the absolute requirement for safety: Rust's type system and runtime guarantee the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized or deallocated memory.},
  journal = {Ada Lett.},
  month = {oct},
  pages = {103–104},
  numpages = {2},
  keywords = {memory management, rust, affine type systems, systems programming}
}

@misc{Rust,
  author = {The {Rust team}},
  title = {The {Rust} programming language},
  year = {2023},
  url = {https://rust-lang.org/}
}

@InProceedings{Xi04,
  author="Xi, Hongwei",
  editor="Berardi, Stefano
    and Coppo, Mario
    and Damiani, Ferruccio",
  title="Applied Type System",
  booktitle="Types for Proofs and Programs",
  year="2004",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="394--408",
  abstract="The framework Pure Type System ({\$}{\backslash}mathcal{\{}PTS{\}}{\$}) offers a simple and general approach to designing and formalizing type systems. However, in the presence of dependent types, there often exist some acute problems that make it difficult for {\$}{\backslash}mathcal{\{}PTS{\}}{\$}to accommodate many common realistic programming features such as general recursion, recursive types, effects (e.g., exceptions, references, input/output), etc. In this paper, we propose a new framework Applied Type System ({\$}{\backslash}mathcal{\{}ATS{\}}{\$}) to allow for designing and formalizing type systems that can readily support common realistic programming features. The key salient feature of {\$}{\backslash}mathcal{\{}ATS{\}}{\$}lies in a complete separation between statics, in which types are formed and reasoned about, and dynamics, in which programs are constructed and evaluated. With this separation, it is no longer possible for a program to occur in a type as is otherwise allowed in {\$}{\backslash}mathcal{\{}PTS{\}}{\$}. We present not only a formal development of {\$}{\backslash}mathcal{\{}ATS{\}}{\$}but also mention some examples in support of using {\$}{\backslash}mathcal{\{}ATS{\}}{\$}as a framework to form type systems for practical programming.",
  isbn="978-3-540-24849-1"
}

@inproceedings{ZX05,
  author       = {Dengping Zhu and
                  Hongwei Xi},
  editor       = {Manuel V. Hermenegildo and
                  Daniel Cabeza},
  title        = {Safe Programming with Pointers Through Stateful Views},
  booktitle    = {Practical Aspects of Declarative Languages, 7th International Symposium,
                  {PADL} 2005, Long Beach, CA, USA, January 10-11, 2005, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {3350},
  pages        = {83--97},
  publisher    = {Springer},
  year         = {2005},
  url          = {https://doi.org/10.1007/978-3-540-30557-6\_8},
  doi          = {10.1007/978-3-540-30557-6\_8},
  timestamp    = {Tue, 14 May 2019 10:00:42 +0200},
  biburl       = {https://dblp.org/rec/conf/padl/ZhuX05.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{HLVCCDMPRTVTZ16,
  author = {H\"{u}ttel, Hans and Lanese, Ivan and Vasconcelos, Vasco T. and Caires, Lu\'{\i}s and Carbone, Marco and Deni\'{e}lou, Pierre-Malo and Mostrous, Dimitris and Padovani, Luca and Ravara, Ant\'{o}nio and Tuosto, Emilio and Vieira, Hugo Torres and Zavattaro, Gianluigi},
  title = {Foundations of Session Types and Behavioural Contracts},
  year = {2016},
  issue_date = {March 2017},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {49},
  number = {1},
  issn = {0360-0300},
  url = {https://doi.org/10.1145/2873052},
  doi = {10.1145/2873052},
  abstract = {Behavioural type systems, usually associated to concurrent or distributed computations, encompass concepts such as interfaces, communication protocols, and contracts, in addition to the traditional input/output operations. The behavioural type of a software component specifies its expected patterns of interaction using expressive type languages, so types can be used to determine automatically whether the component interacts correctly with other components. Two related important notions of behavioural types are those of session types and behavioural contracts. This article surveys the main accomplishments of the last 20 years within these two approaches.},
  journal = {ACM Comput. Surv.},
  month = {apr},
  articleno = {3},
  numpages = {36},
  keywords = {Behavioural types}
}

@article{GSS92,
  author       = {Jean{-}Yves Girard and
                  Andre Scedrov and
                  Philip J. Scott},
  title        = {Bounded Linear Logic: {A} Modular Approach to Polynomial-Time Computability},
  journal      = {Theor. Comput. Sci.},
  volume       = {97},
  number       = {1},
  pages        = {1--66},
  year         = {1992},
  url          = {https://doi.org/10.1016/0304-3975(92)90386-T},
  doi          = {10.1016/0304-3975(92)90386-T},
  timestamp    = {Wed, 17 Feb 2021 21:57:01 +0100},
  biburl       = {https://dblp.org/rec/journals/tcs/GirardSS92.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{ER03,
  title = {The differential lambda-calculus},
  journal = {Theoretical Computer Science},
  volume = {309},
  number = {1},
  pages = {1-41},
  year = {2003},
  issn = {0304-3975},
  doi = {https://doi.org/10.1016/S0304-3975(03)00392-X},
  url = {https://www.sciencedirect.com/science/article/pii/S030439750300392X},
  author = {Thomas Ehrhard and Laurent Regnier},
  keywords = {Lambda-calculus, Linear logic, Denotational semantics, Linear head reduction},
}

@article{Ehrhard18,
  title = {An introduction to differential linear logic: proof-nets, models and antiderivatives},
  volume = {28},
  DOI = {10.1017/S0960129516000372},
  number = {7},
  journal = {Mathematical Structures in Computer Science},
  publisher = {Cambridge University Press},
  author = {Ehrhard, Thomas},
  year = {2018},
  pages = {995–1060}
}

@InProceedings{IMO20,
  author = {Andrej Iva{\v{s}}ković and Alan Mycroft and Dominic Orchard},
  title = {{Data-Flow Analyses as Effects and Graded Monads}},
  booktitle = {5th International Conference on Formal Structures for Computation and Deduction (FSCD 2020)},
  pages = {15:1--15:23},
  series = {Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN = {978-3-95977-155-9},
  ISSN = {1868-8969},
  year = {2020},
  volume = {167},
  editor = {Zena M. Ariola},
  publisher = {Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik},
  address = {Dagstuhl, Germany},
  URL = {https://drops.dagstuhl.de/opus/volltexte/2020/12337},
  URN = {urn:nbn:de:0030-drops-123376},
  doi = {10.4230/LIPIcs.FSCD.2020.15},
  annote = {Keywords: data-flow analysis, effect systems, graded monads, correctness}
}



@inproceedings{POPLmark,
  author       = {Brian E. Aydemir and
                  Aaron Bohannon and
                  Matthew Fairbairn and
                  J. Nathan Foster and
                  Benjamin C. Pierce and
                  Peter Sewell and
                  Dimitrios Vytiniotis and
                  Geoffrey Washburn and
                  Stephanie Weirich and
                  Steve Zdancewic},
  editor       = {Joe Hurd and
                  Thomas F. Melham},
  title        = {Mechanized Metatheory for the Masses: The PoplMark Challenge},
  booktitle    = {Theorem Proving in Higher Order Logics, 18th International Conference,
                  TPHOLs 2005, Oxford, UK, August 22-25, 2005, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {3603},
  pages        = {50--65},
  publisher    = {Springer},
  year         = {2005},
  url          = {https://doi.org/10.1007/11541868\_4},
  doi          = {10.1007/11541868\_4},
  timestamp    = {Tue, 14 May 2019 10:00:48 +0200},
  biburl       = {https://dblp.org/rec/conf/tphol/AydemirBFFPSVWWZ05.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@book{Restall1999,
  author = {Greg Restall},
  editor = {},
  title = {An Introduction to Substructural Logics},
  publisher = {New York: Routledge},
  year = {1999}
}

@article{CHP00,
  author       = {Iliano Cervesato and
                  Joshua S. Hodas and
                  Frank Pfenning},
  title        = {Efficient resource management for linear logic proof search},
  journal      = {Theor. Comput. Sci.},
  volume       = {232},
  number       = {1-2},
  pages        = {133--163},
  year         = {2000},
  url          = {https://doi.org/10.1016/S0304-3975(99)00173-5},
  doi          = {10.1016/S0304-3975(99)00173-5},
  timestamp    = {Wed, 17 Feb 2021 21:57:04 +0100},
  biburl       = {https://dblp.org/rec/journals/tcs/CervesatoHP00.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{WH94,
  title={Deterministic Resource Management for the Linear Logic Programming Language Lygon},
  author={Michael Winikoff and James Harland},
  year={1994}
}

@article{CP02,
  author       = {Iliano Cervesato and
                  Frank Pfenning},
  title        = {A Linear Logical Framework},
  journal      = {Inf. Comput.},
  volume       = {179},
  number       = {1},
  pages        = {19--75},
  year         = {2002},
  url          = {https://doi.org/10.1006/inco.2001.2951},
  doi          = {10.1006/inco.2001.2951},
  timestamp    = {Fri, 12 Feb 2021 22:15:20 +0100},
  biburl       = {https://dblp.org/rec/journals/iandc/CervesatoP02.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{HHP93,
  author       = {Robert Harper and
                  Furio Honsell and
                  Gordon D. Plotkin},
  title        = {A Framework for Defining Logics},
  journal      = {J. {ACM}},
  volume       = {40},
  number       = {1},
  pages        = {143--184},
  year         = {1993},
  url          = {https://doi.org/10.1145/138027.138060},
  doi          = {10.1145/138027.138060},
  timestamp    = {Tue, 06 Nov 2018 12:51:44 +0100},
  biburl       = {https://dblp.org/rec/journals/jacm/HarperHP93.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{McBride18,
  doi = {10.4204/eptcs.275.6},
  url = {https://doi.org/10.4204%2Feptcs.275.6},
  year = 2018,
  month = {jul},
  publisher = {Open Publishing Association},
  volume = {275},
  pages = {53--69},
  author = {Conor McBride},
  title = {Everybody{\textquotesingle}s Got To Be Somewhere},
  journal = {Electronic Proceedings in Theoretical Computer Science}
}

@inproceedings{Twelf,
  author       = {Frank Pfenning and
                  Carsten Sch{\"{u}}rmann},
  editor       = {Harald Ganzinger},
  title        = {System Description: Twelf - {A} Meta-Logical Framework for Deductive
                  Systems},
  booktitle    = {Automated Deduction - CADE-16, 16th International Conference on Automated
                  Deduction, Trento, Italy, July 7-10, 1999, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {1632},
  pages        = {202--206},
  publisher    = {Springer},
  year         = {1999},
  url          = {https://doi.org/10.1007/3-540-48660-7\_14},
  doi          = {10.1007/3-540-48660-7\_14},
  timestamp    = {Tue, 14 May 2019 10:00:39 +0200},
  biburl       = {https://dblp.org/rec/conf/cade/PfenningS99.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{VRC22,
  author       = {Nachiappan Valliappan and
                  Fabian Ruch and
                  Carlos {Tom{'{e}} Corti{~{n}}as}},
  title        = {Normalization for fitch-style modal calculi},
  journal      = {Proc. {ACM} Program. Lang.},
  volume       = {6},
  number       = {{ICFP}},
  pages        = {772--798},
  year         = {2022},
  url          = {https://doi.org/10.1145/3547649},
  doi          = {10.1145/3547649},
  timestamp    = {Tue, 18 Oct 2022 22:18:46 +0200},
  biburl       = {https://dblp.org/rec/journals/pacmpl/ValliappanRC22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@phdthesis{Borghuis-thesis,
  title = "Coming to terms with modal logic : on the interpretation of modalities in typed lambda-calculus",
  author = "V.A.J. Borghuis",
  year = "1994",
  doi = "10.6100/IR427575",
  language = "English",
  publisher = "Technische Universiteit Eindhoven",
  school = "Mathematics and Computer Science",
}

@Book{hottbook,
  author =    {The {Univalent Foundations Program}},
  title =     {Homotopy Type Theory: Univalent Foundations of Mathematics},
  publisher = {\url{https://homotopytypetheory.org/book}},
  address =   {Institute for Advanced Study},
  year =      2013
}

@misc{Agda,
  author = {The {Agda Development Team}},
  title = {Agda 2.6.3},
  url = {https://agda.readthedocs.io/en/v2.6.3/},
  year = {2023}
}

@article{MM04,
  author       = {Conor McBride and
                  James McKinna},
  title        = {The view from the left},
  journal      = {J. Funct. Program.},
  volume       = {14},
  number       = {1},
  pages        = {69--111},
  year         = {2004},
  url          = {https://doi.org/10.1017/S0956796803004829},
  doi          = {10.1017/S0956796803004829},
  timestamp    = {Wed, 14 Nov 2018 10:38:39 +0100},
  biburl       = {https://dblp.org/rec/journals/jfp/McBrideM04.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{CCD19,
  author       = {Simon Castellan and
                  Pierre Clairambault and
                  Peter Dybjer},
  title        = {Categories with Families: Unityped, Simply Typed, and Dependently
                  Typed},
  journal      = {CoRR},
  volume       = {abs/1904.00827},
  year         = {2019},
  url          = {http://arxiv.org/abs/1904.00827},
  eprinttype    = {arXiv},
  eprint       = {1904.00827},
  timestamp    = {Wed, 24 Apr 2019 12:21:25 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-1904-00827.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Dybjer95,
  author       = {Peter Dybjer},
  editor       = {Stefano Berardi and
                  Mario Coppo},
  title        = {Internal Type Theory},
  booktitle    = {Types for Proofs and Programs, International Workshop TYPES'95, Torino,
                  Italy, June 5-8, 1995, Selected Papers},
  series       = {Lecture Notes in Computer Science},
  volume       = {1158},
  pages        = {120--134},
  publisher    = {Springer},
  year         = {1995},
  url          = {https://doi.org/10.1007/3-540-61780-9\_66},
  doi          = {10.1007/3-540-61780-9\_66},
  timestamp    = {Tue, 14 May 2019 10:00:42 +0200},
  biburl       = {https://dblp.org/rec/conf/types/Dybjer95.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@book{Hart95,
  title={Multidimensional analysis: algebras and systems for science and engineering},
  author={Hart, George W},
  year={1995},
  publisher={Springer Science \& Business Media}
}


@inbook{MF21,
  title = "Type systems for programs respecting dimensions",
  abstract = "Type systems can be used for tracking dimensional consistency of numerical computations: we present an extension from dimensions of scalar quantities to dimensions of vectors and matrices, making use of dependent types from programming language theory. We show that our types are unique, and most general. We further show that we can give straightforward dimensioned types to many common matrix operations such as addition, multiplication, determinants, traces, and fundamental row operations.",
  keywords = "units of measure, dimensions, type systems, dependent types",
  author = "Conor McBride and {Nordvall Forsberg}, Fredrik",
  year = "2021",
  month = jan,
  day = "8",
  language = "English",
  series = "Series on Advances in Mathematics for Applied Sciences",
  publisher = "World Scientific Publishing Co. Pte Ltd",
  booktitle = "Advanced Mathematical and Computational Tools in Metrology and Testing XII",
  address = "Singapore",
  note = "Advanced Mathematical and Computational Tools in Metrology and Testing XII, AMCTMT XII ; Conference date: 15-09-2020 Through 17-09-2020",
}

@inproceedings{GRS16,
  author       = {Ananda Guneratne and
                  Chad Reynolds and
                  Aaron Stump},
  editor       = {David Van Horn and
                  John Hughes},
  title        = {Project Report: Dependently Typed Programming with Lambda Encodings
                  in Cedille},
  booktitle    = {Trends in Functional Programming - 17th International Conference,
                  {TFP} 2016, College Park, MD, USA, June 8-10, 2016, Revised Selected
                  Papers},
  series       = {Lecture Notes in Computer Science},
  volume       = {10447},
  pages        = {115--134},
  publisher    = {Springer},
  year         = {2016},
  url          = {https://doi.org/10.1007/978-3-030-14805-8\_7},
  doi          = {10.1007/978-3-030-14805-8\_7},
  timestamp    = {Tue, 21 Mar 2023 21:02:23 +0100},
  biburl       = {https://dblp.org/rec/conf/sfp/GuneratneRS16.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Brady21,
  author       = {Edwin C. Brady},
  editor       = {Anders M{\o}ller and
                  Manu Sridharan},
  title        = {Idris 2: Quantitative Type Theory in Practice},
  booktitle    = {35th European Conference on Object-Oriented Programming, {ECOOP} 2021,
                  July 11-17, 2021, Aarhus, Denmark (Virtual Conference)},
  series       = {LIPIcs},
  volume       = {194},
  pages        = {9:1--9:26},
  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
  year         = {2021},
  url          = {https://doi.org/10.4230/LIPIcs.ECOOP.2021.9},
  doi          = {10.4230/LIPIcs.ECOOP.2021.9},
  timestamp    = {Sun, 25 Jul 2021 11:47:10 +0200},
  biburl       = {https://dblp.org/rec/conf/ecoop/Brady21.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{deMU21,
  author       = {Leonardo de Moura and
                  Sebastian Ullrich},
  editor       = {Andr{\'{e}} Platzer and
                  Geoff Sutcliffe},
  title        = {The Lean 4 Theorem Prover and Programming Language},
  booktitle    = {Automated Deduction - {CADE} 28 - 28th International Conference on
                  Automated Deduction, Virtual Event, July 12-15, 2021, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {12699},
  pages        = {625--635},
  publisher    = {Springer},
  year         = {2021},
  url          = {https://doi.org/10.1007/978-3-030-79876-5\_37},
  doi          = {10.1007/978-3-030-79876-5\_37},
  timestamp    = {Thu, 29 Sep 2022 08:36:56 +0200},
  biburl       = {https://dblp.org/rec/conf/cade/Moura021.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{BS91,
  author       = {Ulrich Berger and
                  Helmut Schwichtenberg},
  title        = {An Inverse of the Evaluation Functional for Typed lambda-calculus},
  booktitle    = {Proceedings of the Sixth Annual Symposium on Logic in Computer Science
                  {(LICS} '91), Amsterdam, The Netherlands, July 15-18, 1991},
  pages        = {203--211},
  publisher    = {{IEEE} Computer Society},
  year         = {1991},
  url          = {https://doi.org/10.1109/LICS.1991.151645},
  doi          = {10.1109/LICS.1991.151645},
  timestamp    = {Fri, 24 Mar 2023 00:01:49 +0100},
  biburl       = {https://dblp.org/rec/conf/lics/BergerS91.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Mycroft84,
  author       = {Alan Mycroft},
  editor       = {Manfred Paul and
                  Bernard J. Robinet},
  title        = {Polymorphic Type Schemes and Recursive Definitions},
  booktitle    = {International Symposium on Programming, 6th Colloquium, Toulouse,
                  France, April 17-19, 1984, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {167},
  pages        = {217--228},
  publisher    = {Springer},
  year         = {1984},
  url          = {https://doi.org/10.1007/3-540-12925-1\_41},
  doi          = {10.1007/3-540-12925-1\_41},
  timestamp    = {Thu, 24 Feb 2022 13:41:39 +0100},
  biburl       = {https://dblp.org/rec/conf/programm/Mycroft84.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Henglein93,
  author       = {Fritz Henglein},
  title        = {Type Inference with Polymorphic Recursion},
  journal      = {{ACM} Trans. Program. Lang. Syst.},
  volume       = {15},
  number       = {2},
  pages        = {253--289},
  year         = {1993},
  url          = {https://doi.org/10.1145/169701.169692},
  doi          = {10.1145/169701.169692},
  timestamp    = {Tue, 06 Nov 2018 12:51:29 +0100},
  biburl       = {https://dblp.org/rec/journals/toplas/Henglein93.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Allais19,
  author       = {Guillaume Allais},
  editor       = {David Darais and
                  Jeremy Gibbons},
  title        = {Generic level polymorphic n-ary functions},
  booktitle    = {Proceedings of the 4th {ACM} {SIGPLAN} International Workshop on Type-Driven
                  Development, TyDe@ICFP 2019, Berlin, Germany, August 18, 2019},
  pages        = {14--26},
  publisher    = {{ACM}},
  year         = {2019},
  url          = {https://doi.org/10.1145/3331554.3342604},
  doi          = {10.1145/3331554.3342604},
  timestamp    = {Mon, 12 Jul 2021 15:34:15 +0200},
  biburl       = {https://dblp.org/rec/conf/icfp/Allais19.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{MK19,
  author = {Dhruv C. Makwana and Neelakantan R. Krishnaswami},
  title = {{NumLin: Linear Types for Linear Algebra}},
  booktitle = {33rd European Conference on Object-Oriented Programming (ECOOP 2019)},
  pages = {14:1--14:25},
  series = {Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN = {978-3-95977-111-5},
  ISSN = {1868-8969},
  year = {2019},
  volume = {134},
  editor = {Alastair F. Donaldson},
  publisher = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address = {Dagstuhl, Germany},
  URL = {http://drops.dagstuhl.de/opus/volltexte/2019/10806},
  URN = {urn:nbn:de:0030-drops-108069},
  doi = {10.4230/LIPIcs.ECOOP.2019.14},
  annote = {Keywords: numerical, linear, algebra, types, permissions, OCaml}
}

@misc{DW22,
  author = {Stephen Dolan and Leo White},
  title = {Stack allocation for OCaml},
  booktitle = {OCaml Users and Developers Workshop 2022},
  year = {2022},
  url = {http://stedolan.net/talks/ocaml22}
}

@article{BH94,
  author       = {Fran{\c{c}}oise Bellegarde and
                  James Hook},
  title        = {Substitution: {A} Formal Methods Case Study Using Monads and Transformations},
  journal      = {Sci. Comput. Program.},
  volume       = {23},
  number       = {2-3},
  pages        = {287--311},
  year         = {1994},
  url          = {https://doi.org/10.1016/0167-6423(94)00022-0},
  doi          = {10.1016/0167-6423(94)00022-0},
  timestamp    = {Mon, 25 Apr 2022 13:11:14 +0200},
  biburl       = {https://dblp.org/rec/journals/scp/BellegardeH94.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{BP99DeBruijn,
  author       = {Richard S. Bird and
                  Ross Paterson},
  title        = {De Bruijn Notation as a Nested Datatype},
  journal      = {J. Funct. Program.},
  volume       = {9},
  number       = {1},
  pages        = {77--91},
  year         = {1999},
  url          = {https://doi.org/10.1017/s0956796899003366},
  doi          = {10.1017/S0956796899003366},
  timestamp    = {Fri, 10 Jun 2022 10:35:14 +0200},
  biburl       = {https://dblp.org/rec/journals/jfp/BirdP99.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{BP99Nested,
  author       = {Richard S. Bird and
                  Ross Paterson},
  title        = {Generalised folds for nested datatypes},
  journal      = {Formal Aspects Comput.},
  volume       = {11},
  number       = {2},
  pages        = {200--222},
  year         = {1999},
  url          = {https://doi.org/10.1007/s001650050047},
  doi          = {10.1007/S001650050047},
  timestamp    = {Mon, 09 May 2022 16:20:12 +0200},
  biburl       = {https://dblp.org/rec/journals/fac/BirdP99.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{GG17,
  author       = {Murdoch James Gabbay and
                  Michael Gabbay},
  title        = {Representation and duality of the untyped {\(\lambda\)}-calculus in
                  nominal lattice and topological semantics, with a proof of topological
                  completeness},
  journal      = {Ann. Pure Appl. Log.},
  volume       = {168},
  number       = {3},
  pages        = {501--621},
  year         = {2017},
  url          = {https://doi.org/10.1016/j.apal.2016.10.001},
  doi          = {10.1016/j.apal.2016.10.001},
  timestamp    = {Mon, 26 Oct 2020 08:45:08 +0100},
  biburl       = {https://dblp.org/rec/journals/apal/GabbayG17.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Howard80,
  title={The formulae-as-types notion of construction},
  author={Howard, William A},
  journal={To HB Curry: essays on combinatory logic, lambda calculus and formalism},
  volume={44},
  pages={479--490},
  year={1980}
}

@misc{Krishnaswami13,
  title = {Strong Normalization without Logical Relations},
  author = {Neel Krishnaswami},
  year = {2013},
  url = {https://semantic-domain.blogspot.com/2013/05/strong-normalization-without-logical.html}
}


@inproceedings{ZD21,
  author       = {Uma Zalakain and
                  Ornela Dardha},
  editor       = {Kirstin Peters and
                  Tim A. C. Willemse},
  title        = {{\(\pi\)} with Leftovers: {A} Mechanisation in Agda},
  booktitle    = {Formal Techniques for Distributed Objects, Components, and Systems
                  - 41st {IFIP} {WG} 6.1 International Conference, {FORTE} 2021, Held
                  as Part of the 16th International Federated Conference on Distributed
                  Computing Techniques, DisCoTec 2021, Valletta, Malta, June 14-18,
                  2021, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {12719},
  pages        = {157--174},
  publisher    = {Springer},
  year         = {2021},
  url          = {https://doi.org/10.1007/978-3-030-78089-0\_9},
  doi          = {10.1007/978-3-030-78089-0\_9},
  timestamp    = {Tue, 15 Jun 2021 17:23:41 +0200},
  biburl       = {https://dblp.org/rec/conf/forte/ZalakainD21.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}



@inproceedings{Abel10,
  author       = {Andreas Abel},
  editor       = {Ekaterina Komendantskaya and
                  Ana Bove and
                  Milad Niqui},
  title        = {MiniAgda: Integrating Sized and Dependent Types},
  booktitle    = {Partiality and Recursion in Interactive Theorem Provers, PAR@ITP 2010,
                  Edinburgh, UK, July 15, 2010},
  series       = {EPiC Series},
  volume       = {5},
  pages        = {18--33},
  publisher    = {EasyChair},
  year         = {2010},
  url          = {https://doi.org/10.29007/322q},
  doi          = {10.29007/322q},
  timestamp    = {Sun, 15 Aug 2021 00:16:55 +0200},
  biburl       = {https://dblp.org/rec/conf/itp/000110.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{AP11,
  author       = {Andreas Abel and
                  Brigitte Pientka},
  editor       = {C.{-}H. Luke Ong},
  title        = {Higher-Order Dynamic Pattern Unification for Dependent Types and Records},
  booktitle    = {Typed Lambda Calculi and Applications - 10th International Conference,
                  {TLCA} 2011, Novi Sad, Serbia, June 1-3, 2011. Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {6690},
  pages        = {10--26},
  publisher    = {Springer},
  year         = {2011},
  url          = {https://doi.org/10.1007/978-3-642-21691-6\_5},
  doi          = {10.1007/978-3-642-21691-6\_5},
  timestamp    = {Tue, 14 May 2019 10:00:41 +0200},
  biburl       = {https://dblp.org/rec/conf/tlca/AbelP11.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Miller92,
  author       = {Dale Miller},
  title        = {Unification Under a Mixed Prefix},
  journal      = {J. Symb. Comput.},
  volume       = {14},
  number       = {4},
  pages        = {321--358},
  year         = {1992},
  url          = {https://doi.org/10.1016/0747-7171(92)90011-R},
  doi          = {10.1016/0747-7171(92)90011-R},
  timestamp    = {Sat, 09 Apr 2022 12:25:27 +0200},
  biburl       = {https://dblp.org/rec/journals/jsc/Miller92.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@techreport{Haskell,
  author = {Simon Marlow},
  title = {Haskell 2010 Language Report},
  year = {2010},
  url = {https://www.haskell.org/onlinereport/haskell2010/}
}

@techreport{SML,
  author = {Robin Milner and Mads Tofte and Robert Harper and David MacQueen},
  title = {The Definition of Standard ML},
  year = {1997},
  url = {https://smlfamily.github.io/sml97-defn.pdf}
}

@misc{OCaml,
  author = {Xavier Leroy and
    Damien Doligez and
    Alain Frisch and
    Jacques Garrigue and
    Didier R\'{e}my and
    J\'{e}r\^{o}me Vouillon},
  title = {The OCaml system},
  year = {2022},
  url = {https://v2.ocaml.org/releases/5.0/htmlman/index.html}
}

@misc{Coq,
  author = {The {Coq Team}},
  title = {The {Coq} Reference Manual},
  year = {2023},
  url = {https://coq.inria.fr/refman/index.html#}
}



@inproceedings{BCDE22,
  author       = {Marc Bezem and
                  Thierry Coquand and
                  Peter Dybjer and
                  Mart{\'{\i}}n Escard{\'{o}}},
  editor       = {Delia Kesner and
                  Pierre{-}Marie P{\'{e}}drot},
  title        = {Type Theory with Explicit Universe Polymorphism},
  booktitle    = {28th International Conference on Types for Proofs and Programs, {TYPES}
                  2022, June 20-25, 2022, LS2N, University of Nantes, France},
  series       = {LIPIcs},
  volume       = {269},
  pages        = {13:1--13:16},
  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
  year         = {2022},
  url          = {https://doi.org/10.4230/LIPIcs.TYPES.2022.13},
  doi          = {10.4230/LIPIcs.TYPES.2022.13},
  timestamp    = {Mon, 31 Jul 2023 17:17:51 +0200},
  biburl       = {https://dblp.org/rec/conf/types/BezemCDE22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{BBNPS17,
  author = {Bernardy, Jean-Philippe and Boespflug, Mathieu and Newton, Ryan R. and Peyton Jones, Simon and Spiwack, Arnaud},
  title = {Linear Haskell: Practical Linearity in a Higher-Order Polymorphic Language},
  year = {2017},
  issue_date = {January 2018},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {2},
  number = {POPL},
  url = {https://doi.org/10.1145/3158093},
  doi = {10.1145/3158093},
  abstract = {Linear type systems have a long and storied history, but not a clear path forward to integrate with existing languages such as OCaml or Haskell. In this paper, we study a linear type system designed with two crucial properties in mind: backwards-compatibility and code reuse across linear and non-linear users of a library. Only then can the benefits of linear types permeate conventional functional programming. Rather than bifurcate types into linear and non-linear counterparts, we instead attach linearity to function arrows. Linear functions can receive inputs from linearly-bound values, but can also operate over unrestricted, regular values. To demonstrate the efficacy of our linear type system&nbsp;—&nbsp;both how easy it can be integrated in an existing language implementation and how streamlined it makes it to write programs with linear types&nbsp;—&nbsp;we implemented our type system in ghc, the leading Haskell compiler, and demonstrate two kinds of applications of linear types: mutable data with pure interfaces; and enforcing protocols in I/O-performing functions.},
  journal = {Proc. ACM Program. Lang.},
  month = {dec},
  articleno = {5},
  numpages = {29},
  keywords = {linear types, polymorphism, typestate, GHC, Haskell, laziness, linear logic}
}

@inproceedings{LG88,
  author = {Lucassen, J. M. and Gifford, D. K.},
  title = {Polymorphic Effect Systems},
  year = {1988},
  isbn = {0897912527},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/73560.73564},
  doi = {10.1145/73560.73564},
  abstract = {We present a new approach to programming languages for parallel computers that uses an effect system to discover expression scheduling constraints. This effect system is part of a 'kinded' type system with three base kinds: types, which describe the value that an expression may return; effects, which describe the side-effects that an expression may have; and regions, which describe the area of the store in which side-effects may occur. Types, effects and regions are collectively called descriptions.Expressions can be abstracted over any kind of description variable -- this permits type, effect and region polymorphism. Unobservable side-effects can be masked by the effect system; an effect soundness property guarantees that the effects computed statically by the effect system are a conservative approximation of the actual side-effects that a given expression may have.The effect system we describe performs certain kinds of side-effect analysis that were not previously feasible. Experimental data from the programming language FX indicate that an effect system can be used effectively to compile programs for parallel computers.},
  booktitle = {Proceedings of the 15th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  pages = {47–57},
  numpages = {11},
  location = {San Diego, California, USA},
  series = {POPL '88}
}

@article{Church40,
  author       = {Alonzo Church},
  title        = {A Formulation of the Simple Theory of Types},
  journal      = {J. Symb. Log.},
  volume       = {5},
  number       = {2},
  pages        = {56--68},
  year         = {1940},
  url          = {https://doi.org/10.2307/2266170},
  doi          = {10.2307/2266170},
  timestamp    = {Wed, 14 Nov 2018 10:49:18 +0100},
  biburl       = {https://dblp.org/rec/journals/jsyml/Church40.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inbook{Barendregt93,
  author = {Barendregt, H. P.},
  title = {Lambda Calculi with Types},
  year = {1993},
  isbn = {0198537611},
  publisher = {Oxford University Press, Inc.},
  address = {USA},
  booktitle = {Handbook of Logic in Computer Science (Vol. 2): Background: Computational Structures},
  pages = {117–309},
  numpages = {193}
}

@article{SM19,
  author = {Sozeau, Matthieu and Mangin, Cyprien},
  title = {Equations reloaded: high-level dependently-typed functional programming and proving in Coq},
  year = {2019},
  issue_date = {August 2019},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {3},
  number = {ICFP},
  url = {https://doi.org/10.1145/3341690},
  doi = {10.1145/3341690},
  abstract = {Equations is a plugin for the Coq proof assistant which provides a notation for defining programs by dependent pattern-matching and structural or well-founded recursion. It additionally derives useful high-level proof principles for demonstrating properties about them, abstracting away from the implementation details of the function and its compiled form. We present a general design and implementation that provides a robust and expressive function definition package as a definitional extension to the Coq kernel. At the core of the system is a new simplifier for dependent equalities based on an original handling of the no-confusion property of constructors.},
  journal = {Proc. ACM Program. Lang.},
  month = {jul},
  articleno = {86},
  numpages = {29},
  keywords = {recursion, proof assistants, dependent pattern-matching}
}

@inproceedings{CH03,
  title={First-Class Phantom Types},
  author={James Cheney and Ralf Hinze},
  year={2003},
  url={https://api.semanticscholar.org/CorpusID:45443161}
}

@article{SP08,
  title = {Meta-programming With Built-in Type Equality},
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {199},
  pages = {49-65},
  year = {2008},
  note = {Proceedings of the Fourth International Workshop on Logical Frameworks and Meta-Languages (LFM 2004)},
  issn = {1571-0661},
  doi = {https://doi.org/10.1016/j.entcs.2007.11.012},
  url = {https://www.sciencedirect.com/science/article/pii/S1571066108000789},
  author = {Tim Sheard and Emir Pasalic},
  keywords = {Meta-programming, Meta-language, Equality types}
}

@inproceedings{10.1145/604131.604150,
author = {Xi, Hongwei and Chen, Chiyan and Chen, Gang},
title = {Guarded recursive datatype constructors},
year = {2003},
isbn = {1581136285},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/604131.604150},
doi = {10.1145/604131.604150},
abstract = {We introduce a notion of guarded recursive (g.r.) datatype constructors, generalizing the notion of recursive datatypes in functional programming languages such as ML and Haskell. We address both theoretical and practical issues resulted from this generalization. On one hand, we design a type system to formalize the notion of g.r. datatype constructors and then prove the soundness of the type system. On the other hand, we present some significant applications (e.g., implementing objects, implementing staged computation, etc.) of g.r. datatype constructors, arguing that g.r. datatype constructors can have far-reaching consequences in programming. The main contribution of the paper lies in the recognition and then the formalization of a programming notion that is of both theoretical interest and practical use.},
booktitle = {Proceedings of the 30th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {224–235},
numpages = {12},
keywords = {guarded recursive datatype constructors},
location = {New Orleans, Louisiana, USA},
series = {POPL '03}
}

@article{XCC03,
  author = {Xi, Hongwei and Chen, Chiyan and Chen, Gang},
  title = {Guarded recursive datatype constructors},
  year = {2003},
  issue_date = {January 2003},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {38},
  number = {1},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/640128.604150},
  doi = {10.1145/640128.604150},
  abstract = {We introduce a notion of guarded recursive (g.r.) datatype constructors, generalizing the notion of recursive datatypes in functional programming languages such as ML and Haskell. We address both theoretical and practical issues resulted from this generalization. On one hand, we design a type system to formalize the notion of g.r. datatype constructors and then prove the soundness of the type system. On the other hand, we present some significant applications (e.g., implementing objects, implementing staged computation, etc.) of g.r. datatype constructors, arguing that g.r. datatype constructors can have far-reaching consequences in programming. The main contribution of the paper lies in the recognition and then the formalization of a programming notion that is of both theoretical interest and practical use.},
  journal = {SIGPLAN Not.},
  month = {jan},
  pages = {224–235},
  numpages = {12},
  keywords = {guarded recursive datatype constructors}
}

@inproceedings{10.1145/2676726.2676969,
author = {Krishnaswami, Neelakantan R. and Pradic, Pierre and Benton, Nick},
title = {Integrating Linear and Dependent Types},
year = {2015},
isbn = {9781450333009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676726.2676969},
doi = {10.1145/2676726.2676969},
abstract = {In this paper, we show how to integrate linear types with type dependency, by extending the linear/non-linear calculus of Benton to support type dependency. Next, we give an application of this calculus by giving a proof-theoretic account of imperative programming, which requires extending the calculus with computationally irrelevant quantification, proof irrelevance, and a monad of computations. We show the soundness of our theory by giving a realizability model in the style of Nuprl, which permits us to validate not only the beta-laws for each type, but also the eta-laws. These extensions permit us to decompose Hoare triples into a collection of simpler type-theoretic connectives, yielding a rich equational theory for dependently-typed higher-order imperative programs. Furthermore, both the type theory and its model are relatively simple, even when all of the extensions are considered.},
booktitle = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {17–30},
numpages = {14},
keywords = {dependent types, hoare triples, intersection types, linear types, proof irrelevance, separation logic},
location = {Mumbai, India},
series = {POPL '15}
}

@article{Vakar14,
  author       = {Matthijs V{\'{a}}k{\'{a}}r},
  title        = {Syntax and Semantics of Linear Dependent Types},
  journal      = {CoRR},
  volume       = {abs/1405.0033},
  year         = {2014},
  url          = {http://arxiv.org/abs/1405.0033},
  eprinttype    = {arXiv},
  eprint       = {1405.0033},
  timestamp    = {Mon, 13 Aug 2018 16:48:19 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/Vakar14.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{KPB15,
  author = {Krishnaswami, Neelakantan R. and Pradic, Pierre and Benton, Nick},
  title = {Integrating Linear and Dependent Types},
  year = {2015},
  issue_date = {January 2015},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {50},
  number = {1},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/2775051.2676969},
  doi = {10.1145/2775051.2676969},
  abstract = {In this paper, we show how to integrate linear types with type dependency, by extending the linear/non-linear calculus of Benton to support type dependency. Next, we give an application of this calculus by giving a proof-theoretic account of imperative programming, which requires extending the calculus with computationally irrelevant quantification, proof irrelevance, and a monad of computations. We show the soundness of our theory by giving a realizability model in the style of Nuprl, which permits us to validate not only the beta-laws for each type, but also the eta-laws. These extensions permit us to decompose Hoare triples into a collection of simpler type-theoretic connectives, yielding a rich equational theory for dependently-typed higher-order imperative programs. Furthermore, both the type theory and its model are relatively simple, even when all of the extensions are considered.},
  journal = {SIGPLAN Not.},
  month = {jan},
  pages = {17–30},
  numpages = {14},
  keywords = {dependent types, hoare triples, intersection types, linear types, proof irrelevance, separation logic}
}

@inproceedings{BM98,
  author       = {Richard S. Bird and
                  Lambert G. L. T. Meertens},
  editor       = {Johan Jeuring},
  title        = {Nested Datatypes},
  booktitle    = {Mathematics of Program Construction, MPC'98, Marstrand, Sweden, June
                  15-17, 1998, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {1422},
  pages        = {52--67},
  publisher    = {Springer},
  year         = {1998},
  url          = {https://doi.org/10.1007/BFb0054285},
  doi          = {10.1007/BFB0054285},
  timestamp    = {Tue, 14 May 2019 10:00:46 +0200},
  biburl       = {https://dblp.org/rec/conf/mpc/BirdM98.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
